generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  image    String?
  bio      String?
  email    String    @unique
  role     Role      @default(USER)
  comments Comment[]
  posts    Post[]
}

model Messages {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  email   String
  message String
}

model Post {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  permalink      String         @unique
  title          String
  image          String?
  content        String
  description    String
  publishedAt    DateTime       @default(now())
  lastUpdatedAt  DateTime       @updatedAt
  author         User?          @relation(fields: [authorId], references: [id])
  authorId       String?        @db.ObjectId
  comments       Comment[]
  postCategories PostCategory[]
}

model Category {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String         @unique
  postCategories PostCategory[]
}

model PostCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  postId     String   @db.ObjectId
  categoryId String   @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([postId, categoryId])
}

model Comment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  content     String
  publishedAt DateTime  @default(now())
  post        Post      @relation(fields: [postId], references: [id])
  postId      String    @db.ObjectId
  replies     Comment[] @relation("CommentToComment")
  parentId    String?   @map("parent_id") @db.ObjectId
  parent      Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Property {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  image             String
  client            String
  info              String
  description       String
  category          String
  price             String
  location          Address
  relatedProperties Property[] @relation("PropertyToProperty")
  inverseRelation   Property?  @relation("PropertyToProperty", fields: [inverseRelationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inverseRelationId String?    @db.ObjectId
  lastUpdated       DateTime   @updatedAt
  size              String
  numberOfBedrooms  Int
  numberOfBathrooms Int
}

type Address {
  state String
  city  String
}

enum Role {
  USER
  EDITOR
  ADMIN
}
